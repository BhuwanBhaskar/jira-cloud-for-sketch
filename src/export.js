import { tempDir, localPathToNSURLString } from './util'
import { trace } from './logger'

const badFilenameChars = new RegExp('/', 'g')

/**
 * Exports the currently selected layers to a temp directory, using the layers'
 * configured export settings.
 *
 * @param {Object} document the selected document from the current Sketch context
 * @return {Promise<string[]>} the exported paths
 */
export async function exportSelection (document) {
  const dir = tempDir(`export-${Date.now()}`)
  const selectedLayers = document.selectedLayers().layers()
  trace(`Exporting ${selectedLayers.count()} assets to ${dir}`)
  let exportedPaths = []
  for (let i = 0; i < selectedLayers.count(); i++) {
    exportedPaths.push(...exportLayer(document, selectedLayers[i], dir))
  }
  return exportedPaths
}

/**
 * Export a layer to a particular directory using the filename suggested by
 * Sketch.
 *
 * @param {Object} document the selected document from the current Sketch context
 * @param {Object} layer a Sketch layer
 * @param {string} dir the directory to export to
 */
function exportLayer (document, layer, dir) {
  const exportedPaths = []
  const slices = MSExportRequest.exportRequestsFromExportableLayer(layer)
  for (let i = 0; i < slices.count(); i++) {
    const slice = slices[i]
    const filepath = dir + nameForSlice(slice)
    document.saveArtboardOrSlice_toFile(slice, filepath)
    exportedPaths.push(localPathToNSURLString(filepath))
  }
  return exportedPaths
}

/**
 * @param {Object} slice a Sketch export request (generated by MSExportRequest)
 * @return {string} a suitable filename for the slice
 */
function nameForSlice (slice) {
  return `${encodeLayerNameAsFilename(slice.name())}.${slice.format()}`
}

/**
 * @param {string} layerName the layer's name
 * @return {string} a new filesystem-safe layer name
 */
function encodeLayerNameAsFilename (layerName) {
  return layerName.replace(badFilenameChars, '_')
}
